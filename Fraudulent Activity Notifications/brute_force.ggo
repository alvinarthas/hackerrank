package main

import (
	"bufio"
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

// Complete the activityNotifications function below.
func activityNotifications(expenditure []int, d int) int {
	var notifications int
	for i := d; i < len(expenditure); i++ {
		currentSpend := float64(expenditure[d])
		currentSlice := expenditure[(i - d):i]
		median := median(currentSlice)

		if currentSpend >= (2 * median) {
			notifications++
		}
	}
	return notifications

}

func median(expenditure []int) float64 {
	var median float64
	// Start by sorting a copy of the slice
	sort.Ints(expenditure)

	//
	l := len(expenditure)
	if l == 0 {
		return 0
	} else if l%2 == 0 {
		median = (float64(expenditure[(l/2)-1]) + float64(expenditure[(l/2)])) / 2
	} else {
		median = float64(expenditure[((l+1)/2)-1])
	}

	return median
}

func main() {
	reader := bufio.NewReaderSize(os.Stdin, 1024*1024)

	stdout, err := os.Create(os.Getenv("OUTPUT_PATH"))
	checkError(err)

	defer stdout.Close()

	writer := bufio.NewWriterSize(stdout, 1024*1024)

	nd := strings.Split(readLine(reader), " ")

	nTemp, err := strconv.ParseInt(nd[0], 10, 64)
	checkError(err)
	n := int(nTemp)

	dTemp, err := strconv.ParseInt(nd[1], 10, 64)
	checkError(err)
	d := int(dTemp)

	expenditureTemp := strings.Split(readLine(reader), " ")

	var expenditure []int

	for i := 0; i < int(n); i++ {
		expenditureItemTemp, err := strconv.ParseInt(expenditureTemp[i], 10, 64)
		checkError(err)
		expenditureItem := int(expenditureItemTemp)
		expenditure = append(expenditure, expenditureItem)
	}

	result := activityNotifications(expenditure, d)

	fmt.Fprintf(writer, "%d\n", result)

	writer.Flush()
}

func readLine(reader *bufio.Reader) string {
	str, _, err := reader.ReadLine()
	if err == io.EOF {
		return ""
	}

	return strings.TrimRight(string(str), "\r\n")
}

func checkError(err error) {
	if err != nil {
		panic(err)
	}
}
